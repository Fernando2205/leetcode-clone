FizzBuzz 
        String[] answers = {Integer.toString(n), "Fizz", "Buzz", "FizzBuzz"};
        int index = ((n % 3 == 0) ? 1 : 0) + ((n % 5 == 0) ? 2 : 0);
        return answers[index];

Binary Search

        // Check for empty array first
        if (arr == null || arr.length == 0) {
            return -1;
        }
        
        int left = 0;
        int right = arr.length - 1;
        
        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (arr[mid] == target) {
                return mid;
            }
            if (arr[mid] < target) {
                left = mid + 1;
            } else {
                right = mid - 1;
            }
        }
        
        return -1;

Sum of two numbers

        java.util.HashMap<Integer, Integer> map = new java.util.HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[]{nums[map.get(complement)], nums[i]};
            }
            map.put(nums[i], i);
        }
        
        return new int[]{};



Parentesis vÃ¡lidos
        java.util.Stack<Character> stack = new java.util.Stack<>();
        
        for (char c : s.toCharArray()) {
            if (c == '(' || c == '{' || c == '[') {
                stack.push(c);
            } else {
                if (stack.isEmpty()) return false;
                char top = stack.pop();
                if ((c == ')' && top != '(') ||
                    (c == '}' && top != '{') ||
                    (c == ']' && top != '[')) {
                    return false;
                }
            }
        }
        
        return stack.isEmpty();